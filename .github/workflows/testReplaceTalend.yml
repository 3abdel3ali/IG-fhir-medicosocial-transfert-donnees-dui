name: Run JAR on new ZIP in NOS

on:
  push:
    branches:
      - main
    paths:
      - "nos/*.json"
  pull_request:
    branches:
      - main
    paths:
      - "nos/*.json"

jobs:
  run-jar:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ R√©cup√©ration du d√©p√¥t
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Installation de Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3Ô∏è‚É£ Debug : afficher la structure du d√©p√¥t et s'assurer que le fichier de config existe
      - name: Debug - v√©rifier les fichiers et chemins
        run: |
          echo "R√©pertoire courant : $(pwd)"
          echo "Contenu de la racine :"
          ls -la
          echo "Contenu du dossier JAR :"
          ls -la JAR || true
          echo "Git index pour JAR/configuration.properties :"
          git ls-files -- JAR/configuration.properties || true

      # 4Ô∏è‚É£ Ex√©cution du JAR depuis son propre r√©pertoire
      - name: Ex√©cuter le JAR depuis son r√©pertoire
        working-directory: JAR
        run: |
          echo "R√©pertoire courant : $(pwd)"
          echo "Contenu du dossier JAR :"
          ls -la

          # V√©rifier la pr√©sence du fichier de configuration
          if [ ! -f configuration.properties ]; then
            echo "‚ùå Fichier configuration.properties introuvable dans $(pwd)"
            exit 1
          fi

          # Cr√©er le r√©pertoire log (√† la racine du d√©p√¥t)
          mkdir -p ../log

          # Ex√©cuter le JAR (le plus r√©cent dans JAR/)
          JAR_FILE=$(ls -t *.jar | head -n1)
          echo "üîß Ex√©cution de $JAR_FILE"
          java -jar "$JAR_FILE" 2>&1 | tee ../log/execution.log

      # 5Ô∏è‚É£ Sauvegarde des logs comme artefacts
      - name: Sauvegarder les logs g√©n√©r√©s
        uses: actions/upload-artifact@v4
        with:
          name: jar-logs
          path: log/
